{
    "title":  "Szenarien",
    "intro": "Verschiedene Situationen, die es zu bedenken gibt",
    "examples": [
        {
            "title": "Was ist ein Deadlock?",
            "identifier": "deadlock",
            "intro": "Ein Deadlock entsteht, wenn zwei Prozesse sich 'verklemmen' indem sie auf das Freigeben bestimmter Ressourcen warten, die vom anderen zu diesem Zeitpunkt benutzt werden.",
            "main": "Ein kleines Beispiel: Wir sind auf einem Parkplatz. Ein Auto steht auf einem Parkplatz und m\u00F6chte r\u00FCckw\u00E4rts aus der Parkl\u00FCcke fahren. Hinter ihm steht jedoch schon ein weiteres Auto, dass in den dort freiwerdenden Parkplatz einfahren m\u00F6chte. Also blockiert das wartende Auto das ausparkende Auto und das ausparkende Auto das Wartende.",
            "outro": "Gibt's nich"
        },
        {
            "title": "Was ist ein Livelock?",
            "identifier": "lifelock",
            "intro": "\u00C4hnlich wie beim Deadlock kommen wir nicht mehr zu unserem eigentlichen Ziel. Jedoch wird beim Livelock nicht in der 'Warteposititon' verharrt, sondern es findet ein st\u00E4tiges wechseln der Zust\u00E4nde statt. ",
            "main": "Jip's auch nisch",
            "outro": "Nope"
        },
        {
            "title": "Was ist eine Race Condititon?",
            "identifier": "race_condition",
            "intro": "Eine Race Condititon entsteht, wenn zwei oder mehr Threads von zeitlichen ablaufen gegenseitig abh\u00E4ngig sind. Die Threads laufen ja nicht praktisch 100% parallel, sondern ihnen werden \u00FCber verschiedene Schedular bestimmte Rechenzeitr\u00E4ume zugeteilt. Nun kann es sein, dass aber unser Thread1, der auf das Ergebnis von Thread2 angewiesen ist, zwei mal hintereinander zugeteilt wird, Thread2 dagegen noch nicht weiter laufen konnte. So kann es leicht zu Fehlern kommen.",
            "main": "Wenn du ein Wettrennen gegen deine Mudda machst und sie an Start und Ziel gleichzeitig ist",
            "outro": "Nope"
        },
        {
            "title": "Was ist Synchronisation",
            "identifier": "synchronization",
            "intro": "Synchronisation ist sozusagen die L\u00F6sung der Race Condition. Es ist Teil des zuvor schon angesprochenen Schedulars, nur dass die Synchronisation die Abh\u00E4ngigkeiten der verschiedene Prozesse voneinander beachtet um die effizienteste Zuteilung zu erm\u00F6glichen.",
            "main": "",
            "outro": ""
        }
    ]
}
